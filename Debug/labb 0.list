
labb 0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000324  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000460  08000460  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000460  08000460  00010460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000464  08000464  00010464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000004  08000468  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000008  0800046c  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000028  0800046c  00020028  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_info   00002baf  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000076b  00000000  00000000  00022be7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000368  00000000  00000000  00023358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000320  00000000  00000000  000236c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0001e70a  00000000  00000000  000239e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00002774  00000000  00000000  000420ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000c8109  00000000  00000000  0004485e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0010c967  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000c28  00000000  00000000  0010c9bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000008 	.word	0x20000008
 8000158:	00000000 	.word	0x00000000
 800015c:	08000448 	.word	0x08000448

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000000c 	.word	0x2000000c
 8000178:	08000448 	.word	0x08000448

0800017c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800017c:	b480      	push	{r7}
 800017e:	b083      	sub	sp, #12
 8000180:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* Enable GPIOB */
	SET_BIT(RCC->AHB2ENR, RCC_AHB2ENR_GPIOBEN);
 8000182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000188:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800018c:	f043 0302 	orr.w	r3, r3, #2
 8000190:	64d3      	str	r3, [r2, #76]	; 0x4c
	/* Configure LED (PB.5) as push-pull output, No pull-up, pull-down */

	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE5);
 8000192:	4b34      	ldr	r3, [pc, #208]	; (8000264 <main+0xe8>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	4a33      	ldr	r2, [pc, #204]	; (8000264 <main+0xe8>)
 8000198:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800019c:	6013      	str	r3, [r2, #0]
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE5_0);
 800019e:	4b31      	ldr	r3, [pc, #196]	; (8000264 <main+0xe8>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	4a30      	ldr	r2, [pc, #192]	; (8000264 <main+0xe8>)
 80001a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001a8:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(GPIOB->OTYPER, GPIO_OTYPER_OT5);
 80001aa:	4b2e      	ldr	r3, [pc, #184]	; (8000264 <main+0xe8>)
 80001ac:	685b      	ldr	r3, [r3, #4]
 80001ae:	4a2d      	ldr	r2, [pc, #180]	; (8000264 <main+0xe8>)
 80001b0:	f023 0320 	bic.w	r3, r3, #32
 80001b4:	6053      	str	r3, [r2, #4]
	CLEAR_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED5);
 80001b6:	4b2b      	ldr	r3, [pc, #172]	; (8000264 <main+0xe8>)
 80001b8:	689b      	ldr	r3, [r3, #8]
 80001ba:	4a2a      	ldr	r2, [pc, #168]	; (8000264 <main+0xe8>)
 80001bc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80001c0:	6093      	str	r3, [r2, #8]
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED5_0);
 80001c2:	4b28      	ldr	r3, [pc, #160]	; (8000264 <main+0xe8>)
 80001c4:	689b      	ldr	r3, [r3, #8]
 80001c6:	4a27      	ldr	r2, [pc, #156]	; (8000264 <main+0xe8>)
 80001c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001cc:	6093      	str	r3, [r2, #8]
	CLEAR_BIT(GPIOB->PUPDR, GPIO_PUPDR_PUPD5);
 80001ce:	4b25      	ldr	r3, [pc, #148]	; (8000264 <main+0xe8>)
 80001d0:	68db      	ldr	r3, [r3, #12]
 80001d2:	4a24      	ldr	r2, [pc, #144]	; (8000264 <main+0xe8>)
 80001d4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80001d8:	60d3      	str	r3, [r2, #12]

	/* Enable GPIOC */

	SET_BIT(RCC->AHB2ENR, RCC_AHB2ENR_GPIOCEN);
 80001da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80001e4:	f043 0304 	orr.w	r3, r3, #4
 80001e8:	64d3      	str	r3, [r2, #76]	; 0x4c
	CLEAR_BIT(GPIOC->MODER, GPIO_MODER_MODE4);
 80001ea:	4b1f      	ldr	r3, [pc, #124]	; (8000268 <main+0xec>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a1e      	ldr	r2, [pc, #120]	; (8000268 <main+0xec>)
 80001f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80001f4:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(GPIOC->OSPEEDR, GPIO_OSPEEDR_OSPEED4);
 80001f6:	4b1c      	ldr	r3, [pc, #112]	; (8000268 <main+0xec>)
 80001f8:	689b      	ldr	r3, [r3, #8]
 80001fa:	4a1b      	ldr	r2, [pc, #108]	; (8000268 <main+0xec>)
 80001fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000200:	6093      	str	r3, [r2, #8]
	SET_BIT(GPIOC->OSPEEDR, GPIO_OSPEEDR_OSPEED4_0);
 8000202:	4b19      	ldr	r3, [pc, #100]	; (8000268 <main+0xec>)
 8000204:	689b      	ldr	r3, [r3, #8]
 8000206:	4a18      	ldr	r2, [pc, #96]	; (8000268 <main+0xec>)
 8000208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800020c:	6093      	str	r3, [r2, #8]
	CLEAR_BIT(GPIOC->PUPDR, GPIO_PUPDR_PUPD4);
 800020e:	4b16      	ldr	r3, [pc, #88]	; (8000268 <main+0xec>)
 8000210:	68db      	ldr	r3, [r3, #12]
 8000212:	4a15      	ldr	r2, [pc, #84]	; (8000268 <main+0xec>)
 8000214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000218:	60d3      	str	r3, [r2, #12]
	SET_BIT(GPIOC->PUPDR, GPIO_PUPDR_PUPD4_0);
 800021a:	4b13      	ldr	r3, [pc, #76]	; (8000268 <main+0xec>)
 800021c:	68db      	ldr	r3, [r3, #12]
 800021e:	4a12      	ldr	r2, [pc, #72]	; (8000268 <main+0xec>)
 8000220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000224:	60d3      	str	r3, [r2, #12]
	/* Infinite loop */

	while(1) {
		if   (!READ_BIT(GPIOC->IDR  , GPIO_IDR_ID4)) {
 8000226:	4b10      	ldr	r3, [pc, #64]	; (8000268 <main+0xec>)
 8000228:	691b      	ldr	r3, [r3, #16]
 800022a:	f003 0310 	and.w	r3, r3, #16
 800022e:	2b00      	cmp	r3, #0
 8000230:	d106      	bne.n	8000240 <main+0xc4>
			GPIOB->ODR   ^= GPIO_ODR_OD5;
 8000232:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <main+0xe8>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	4a0b      	ldr	r2, [pc, #44]	; (8000264 <main+0xe8>)
 8000238:	f083 0320 	eor.w	r3, r3, #32
 800023c:	6153      	str	r3, [r2, #20]
 800023e:	e005      	b.n	800024c <main+0xd0>
		}
		else
			CLEAR_BIT(GPIOB->ODR , GPIO_ODR_OD5);
 8000240:	4b08      	ldr	r3, [pc, #32]	; (8000264 <main+0xe8>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4a07      	ldr	r2, [pc, #28]	; (8000264 <main+0xe8>)
 8000246:	f023 0320 	bic.w	r3, r3, #32
 800024a:	6153      	str	r3, [r2, #20]
		for(int i = 0; i < 100000; i++)__NOP();
 800024c:	2300      	movs	r3, #0
 800024e:	607b      	str	r3, [r7, #4]
 8000250:	e003      	b.n	800025a <main+0xde>
 8000252:	bf00      	nop
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	3301      	adds	r3, #1
 8000258:	607b      	str	r3, [r7, #4]
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	4a03      	ldr	r2, [pc, #12]	; (800026c <main+0xf0>)
 800025e:	4293      	cmp	r3, r2
 8000260:	ddf7      	ble.n	8000252 <main+0xd6>
		if   (!READ_BIT(GPIOC->IDR  , GPIO_IDR_ID4)) {
 8000262:	e7e0      	b.n	8000226 <main+0xaa>
 8000264:	48000400 	.word	0x48000400
 8000268:	48000800 	.word	0x48000800
 800026c:	0001869f 	.word	0x0001869f

08000270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000274:	e7fe      	b.n	8000274 <NMI_Handler+0x4>

08000276 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000276:	b480      	push	{r7}
 8000278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800027a:	e7fe      	b.n	800027a <HardFault_Handler+0x4>

0800027c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000280:	e7fe      	b.n	8000280 <MemManage_Handler+0x4>

08000282 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000282:	b480      	push	{r7}
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000286:	e7fe      	b.n	8000286 <BusFault_Handler+0x4>

08000288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800028c:	e7fe      	b.n	800028c <UsageFault_Handler+0x4>

0800028e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800028e:	b480      	push	{r7}
 8000290:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000292:	bf00      	nop
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr

0800029c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr

080002aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002aa:	b480      	push	{r7}
 80002ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002ae:	bf00      	nop
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr

080002b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002bc:	f000 f88c 	bl	80003d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80002c8:	4b24      	ldr	r3, [pc, #144]	; (800035c <SystemInit+0x98>)
 80002ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002ce:	4a23      	ldr	r2, [pc, #140]	; (800035c <SystemInit+0x98>)
 80002d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80002d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80002e2:	f043 0301 	orr.w	r3, r3, #1
 80002e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80002e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002ec:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80002f0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80002f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80002fc:	4b18      	ldr	r3, [pc, #96]	; (8000360 <SystemInit+0x9c>)
 80002fe:	4013      	ands	r3, r2
 8000300:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800030a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800030e:	f023 0305 	bic.w	r3, r3, #5
 8000312:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800031a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800031e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000322:	f023 0301 	bic.w	r3, r3, #1
 8000326:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800032a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800032e:	4a0d      	ldr	r2, [pc, #52]	; (8000364 <SystemInit+0xa0>)
 8000330:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000336:	4a0b      	ldr	r2, [pc, #44]	; (8000364 <SystemInit+0xa0>)
 8000338:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800033a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000344:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000348:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800034a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800034e:	2200      	movs	r2, #0
 8000350:	619a      	str	r2, [r3, #24]
}
 8000352:	bf00      	nop
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr
 800035c:	e000ed00 	.word	0xe000ed00
 8000360:	faf6fefb 	.word	0xfaf6fefb
 8000364:	22041000 	.word	0x22041000

08000368 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000368:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800036a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036c:	3304      	adds	r3, #4

0800036e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800036e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000370:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000372:	d3f9      	bcc.n	8000368 <CopyDataInit>
  bx lr
 8000374:	4770      	bx	lr

08000376 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000376:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000378:	3004      	adds	r0, #4

0800037a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800037a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800037c:	d3fb      	bcc.n	8000376 <FillZerobss>
  bx lr
 800037e:	4770      	bx	lr

08000380 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000380:	480c      	ldr	r0, [pc, #48]	; (80003b4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000382:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000384:	f7ff ff9e 	bl	80002c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000388:	480b      	ldr	r0, [pc, #44]	; (80003b8 <LoopForever+0x8>)
 800038a:	490c      	ldr	r1, [pc, #48]	; (80003bc <LoopForever+0xc>)
 800038c:	4a0c      	ldr	r2, [pc, #48]	; (80003c0 <LoopForever+0x10>)
 800038e:	2300      	movs	r3, #0
 8000390:	f7ff ffed 	bl	800036e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000394:	480b      	ldr	r0, [pc, #44]	; (80003c4 <LoopForever+0x14>)
 8000396:	490c      	ldr	r1, [pc, #48]	; (80003c8 <LoopForever+0x18>)
 8000398:	2300      	movs	r3, #0
 800039a:	f7ff ffee 	bl	800037a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800039e:	480b      	ldr	r0, [pc, #44]	; (80003cc <LoopForever+0x1c>)
 80003a0:	490b      	ldr	r1, [pc, #44]	; (80003d0 <LoopForever+0x20>)
 80003a2:	2300      	movs	r3, #0
 80003a4:	f7ff ffe9 	bl	800037a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003a8:	f000 f82a 	bl	8000400 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80003ac:	f7ff fee6 	bl	800017c <main>

080003b0 <LoopForever>:

LoopForever:
  b LoopForever
 80003b0:	e7fe      	b.n	80003b0 <LoopForever>
 80003b2:	0000      	.short	0x0000
  ldr   r0, =_estack
 80003b4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80003b8:	20000004 	.word	0x20000004
 80003bc:	20000008 	.word	0x20000008
 80003c0:	08000468 	.word	0x08000468
  INIT_BSS _sbss, _ebss
 80003c4:	20000008 	.word	0x20000008
 80003c8:	20000028 	.word	0x20000028
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80003cc:	20030000 	.word	0x20030000
 80003d0:	20030000 	.word	0x20030000

080003d4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80003d4:	e7fe      	b.n	80003d4 <ADC1_IRQHandler>
	...

080003d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80003dc:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <HAL_IncTick+0x20>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	461a      	mov	r2, r3
 80003e2:	4b06      	ldr	r3, [pc, #24]	; (80003fc <HAL_IncTick+0x24>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4413      	add	r3, r2
 80003e8:	4a04      	ldr	r2, [pc, #16]	; (80003fc <HAL_IncTick+0x24>)
 80003ea:	6013      	str	r3, [r2, #0]
}
 80003ec:	bf00      	nop
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	20000004 	.word	0x20000004
 80003fc:	20000024 	.word	0x20000024

08000400 <__libc_init_array>:
 8000400:	b570      	push	{r4, r5, r6, lr}
 8000402:	4d0d      	ldr	r5, [pc, #52]	; (8000438 <__libc_init_array+0x38>)
 8000404:	4c0d      	ldr	r4, [pc, #52]	; (800043c <__libc_init_array+0x3c>)
 8000406:	1b64      	subs	r4, r4, r5
 8000408:	10a4      	asrs	r4, r4, #2
 800040a:	2600      	movs	r6, #0
 800040c:	42a6      	cmp	r6, r4
 800040e:	d109      	bne.n	8000424 <__libc_init_array+0x24>
 8000410:	4d0b      	ldr	r5, [pc, #44]	; (8000440 <__libc_init_array+0x40>)
 8000412:	4c0c      	ldr	r4, [pc, #48]	; (8000444 <__libc_init_array+0x44>)
 8000414:	f000 f818 	bl	8000448 <_init>
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	10a4      	asrs	r4, r4, #2
 800041c:	2600      	movs	r6, #0
 800041e:	42a6      	cmp	r6, r4
 8000420:	d105      	bne.n	800042e <__libc_init_array+0x2e>
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f855 3b04 	ldr.w	r3, [r5], #4
 8000428:	4798      	blx	r3
 800042a:	3601      	adds	r6, #1
 800042c:	e7ee      	b.n	800040c <__libc_init_array+0xc>
 800042e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000432:	4798      	blx	r3
 8000434:	3601      	adds	r6, #1
 8000436:	e7f2      	b.n	800041e <__libc_init_array+0x1e>
 8000438:	08000460 	.word	0x08000460
 800043c:	08000460 	.word	0x08000460
 8000440:	08000460 	.word	0x08000460
 8000444:	08000464 	.word	0x08000464

08000448 <_init>:
 8000448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044a:	bf00      	nop
 800044c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800044e:	bc08      	pop	{r3}
 8000450:	469e      	mov	lr, r3
 8000452:	4770      	bx	lr

08000454 <_fini>:
 8000454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000456:	bf00      	nop
 8000458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800045a:	bc08      	pop	{r3}
 800045c:	469e      	mov	lr, r3
 800045e:	4770      	bx	lr
